#!/usr/bin/env bash
# Copyright (C) 2024 Evgeny Sinelnikov <sin@altlinux.org>
# Copyright (C) 2024 Sergey Savelev <savelevsa@basealt.ru>
#
# The Domain Controller Status Diagnostic Utility
#
# This program is free software: you can redistribute it and/or modify
#
# SPDX-License-Identifier: GNU GPL v3.0

set -euo pipefail

. shell-getopt

PROG_NAME="${0##*/}"
VERSION="0.0.1"
global_retval=0
task_list="$*"
cmd="run"

# Function for displaying the program version
print_version() {
    cat <<EOF
$PROG_NAME version $VERSION
EOF
    exit 0
}

# The function outputs reference information
show_usage() {
    cat <<EOF
$PROG_NAME - The Domain Controller Status Diagnostic Utility

Usage: $PROG_NAME [options] [<diagnostic-task>]

Options:
    -l, --list			list of diagnostic tasks
    -V, --version		print program version and exit
    -h, --help			show this text and exit
EOF
    exit 0
}

TEMP=$(getopt -n "${0##*/}" -o "l,v,r,h", -l "list,version,report,help" -- "$@") || show_usage
eval set -- "$TEMP"

while :; do
    case "$1" in
	-l|--list)
	    cmd="list"
	    shift
	    ;;
	-v|--version)
	    print_version
	    shift
	    ;;
	-r|--report)
	    shift
	    ;;
	-h|--help)
	    show_usage
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    fatal "Unrecognized option: $1"
	    ;;
    esac
done

# A function for displaying a list of tests
task_show() {
    local func="$1"
    echo "$func"
}

# Function for running tests
task_run() {
    local retval=126
    local func="$1"

    if test -n "$task_list"; then
	echo "$task_list" | tr ' ' '\n' | grep -q "^$func\$" || return 0
    fi

    $func && retval=0 || retval="$?"
    test $retval=0 || global_retval=1

    return $retval
}

# Depending on the parameter of the cmd variable, the function decides what to run
task() {
    local task="$1"

    case "$cmd" in
	list)
	    task_show "$task"
	    ;;
	report)
	    ;;
# Here, add a condition for the error code (output [WARN] when the error code of the test = 2)
	run)
	    task_run "$task" && echo "[DONE]: $task" || echo "[FAIL]: $task"
	    ;;
	*)
	    fatal "Unrecognized command: $cmd"
	    ;;
    esac
}

# Checking the availability of viewing general domain information
is_domain_info_available() {
    local retval=0

    samba-tool domain info 127.0.0.1 &> /dev/null || retval=1

    return $retval
}

# Checking the correct spelling of the domain name of the host
is_hostname_correct() {
    local retval=0

    hostnamectl | head -n1 | awk '{print $NF}' | grep "^[^.]*\..*" &> /dev/null || retval=1

    return $retval
}

# Checking if the sysvol directory is empty
is_not_empty_sysvol() {
    local retval=0

    test -n "$(ls -A /var/lib/samba/sysvol 2> /dev/null)" || retval=2

    return $retval
}

# Checking for the samba package in the system
is_samba_package_installed() {
    local retval=0
    local packet_name=

    packet_name="samba"

    rpm -qi "$packet_name" &> /dev/null || retval=1

    return $retval
}

# Checking for the admx-basealt package in the system
is_admx_basealt_package_installed() {
    local retval=0
    local packet_name=

    packet_name="admx-basealt"

    rpm -qi "$packet_name" &> /dev/null || retval=1

    return $retval
}

# Checking whether the Samba service is running
is_samba_service_running() {
    local retval=0
    local service=

    service="samba.service"

    systemctl status "$service" &> /dev/null || retval=1

    return $retval
}

# Samba databases are checked for errors
are_there_errors_in_samba_databases() {
    local retval=0

    samba-tool dbcheck 2> /dev/null | grep -q "Checked \+[[:digit:]]\+ objects (0 errors)" || retval=1

    return $retval
}

# Time Synchronization Check - NTP service activity
is_ntp_service_running() {
    local retval=0

    timedatectl | grep -q "NTP service: active" || retval=2

    return $retval
}

# Checking the operation of recursive dns queries - checking the validity of the dns forward address
is_dns_forward_address_valid() {
    local retval=0
    local validate_ipv4=
    local string_forwarder=

    validate_ipv4="^(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}$"
    string_forwarder="$(grep "dns forwarder =" /etc/samba/smb.conf | awk '{print $4}')"

    grep -E "$validate_ipv4" >/dev/null 2>&1 <<< "$string_forwarder" || retval=2

    return $retval
}

# Checking for own address next to the nameserver string
is_address_written_in_nameserver() {
    local retval=0
    local ip_addr=
    local nameservers=

    ip_addr="$(hostname -i)"
    nameservers="$(grep "nameserver " /etc/resolv.conf | awk '{print $2}')"

    if echo "$nameservers" | grep -q "^$ip_addr$" || echo "$nameservers" | grep -q "127.0.0.1"; then
	retval=0
    else
	retval=2
    fi

    return $retval
}

task is_domain_info_available
task is_hostname_correct
task is_not_empty_sysvol
task is_samba_package_installed
task is_admx_basealt_package_installed
task is_samba_service_running
task are_there_errors_in_samba_databases
task is_ntp_service_running
task is_dns_forward_address_valid
task is_address_written_in_nameserver

# TODO: It is planned to write the rest of the functions for the tests
# TODO: Will need to add a logging feature
# TODO: In the task() function, will need to add the result [WARN]
# TODO: Will need to think about how to output the results of [DONE], [FAIL], [WARN]

exit "$global_retval"